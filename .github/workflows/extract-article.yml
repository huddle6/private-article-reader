name: Extract Article

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'The URL of the article to extract'
        required: true

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install @extractus/article-extractor

      # --- Get non-VPN public IP ---
      - name: Get non-VPN Public IP
        id: check_nonvpn_ip
        run: |
          NON_VPN_IP=$(curl -s https://api.ipify.org)
          echo "Non VPN IP: ${NON_VPN_IP}"
          echo "NON_VPN_IP=${NON_VPN_IP}" >> $GITHUB_ENV

      # --- VPN Steps Begin ---
      - name: Install OpenVPN and expect
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn expect

      - name: Deploy VPN configuration file
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > vpnconfig.ovpn
          
      - name: Create VPN credentials file
        run: |
          echo "${{ secrets.OPENVPN_USERNAME }}" > credentials.txt
          echo "${{ secrets.OPENVPN_PASSWORD }}" >> credentials.txt

      - name: Verify vpnconfig.ovpn File
        run: |
          echo "vpnconfig.ovpn start: $(head -c5 vpnconfig.ovpn)"
          echo "vpnconfig.ovpn end: $(tail -c5 vpnconfig.ovpn)"

      - name: Verify credentials.txt File
        run: |
          echo "credentials.txt start: $(head -c5 credentials.txt)"
          echo "credentials.txt end: $(tail -c5 credentials.txt)"
          
      - name: Connect to VPN
        run: |
          # Start OpenVPN with the configuration and credentials file
          sudo openvpn --config vpnconfig.ovpn --auth-user-pass credentials.txt --daemon
      # --- Wait for VPN to Establish and Verify by checking changed IP ---
      - name: Wait for VPN to Establish
        run: |
          MAX_WAIT=60
          INTERVAL=5
          waited=0

          echo "Waiting for VPN connection to change your public IP from the non-VPN IP: $NON_VPN_IP"
          while [ $waited -lt $MAX_WAIT ]; do
            CURRENT_IP=$(curl -s https://api.ipify.org)
            echo "Current public IP: $CURRENT_IP (waited ${waited}s)"
            if [ "$CURRENT_IP" != "$NON_VPN_IP" ] && [ -n "$CURRENT_IP" ]; then
              echo "VPN connection is active. New public IP: $CURRENT_IP"
              break
            fi
            sleep $INTERVAL
            waited=$((waited + INTERVAL))
          done

          if [ $waited -ge $MAX_WAIT ]; then
            echo "VPN connection did not establish within $MAX_WAIT seconds!"
            exit 1
          fi
      # --- VPN Steps End ---

      - name: Run article extraction
        id: extract_article
        run: |
          echo "const input = '${{ github.event.inputs.url }}';" > extract.js
          echo "import('@extractus/article-extractor').then(({ extract }) => {" >> extract.js
          echo "  async function run() {" >> extract.js
          echo "    try {" >> extract.js
          echo "      const article = await extract(input, { headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:134.0) Gecko/20100101 Firefox/134.0' }});" >> extract.js
          echo "      console.log(JSON.stringify(article, null, 2));" >> extract.js
          echo "      require('fs').writeFileSync('extracted-article.json', JSON.stringify(article, null, 2));" >> extract.js
          echo "    } catch (err) {" >> extract.js
          echo "      console.error(err);" >> extract.js
          echo "    }" >> extract.js
          echo "  }" >> extract.js
          echo "  run();" >> extract.js
          echo "});" >> extract.js
          node extract.js

      - name: Upload extracted article
        uses: actions/upload-artifact@v4
        with:
          name: extracted-article
          path: extracted-article.json
